use approx::{assert_abs_diff_eq, assert_relative_eq};
use puruspe::{Jn, Kn, Yn, In};

const J0_TABLE: [(f64, f64); 14] = [
    (1.00000000000000e-01, 9.97501562066040e-01),
    (2.00000000000000e-01, 9.90024972239576e-01),
    (5.00000000000000e-01, 9.38469807240813e-01),
    (1.00000000000000e+00, 7.65197686557967e-01),
    (1.50000000000000e+00, 5.11827671735918e-01),
    (2.00000000000000e+00, 2.23890779141236e-01),
    (2.50000000000000e+00, -4.83837764681979e-02),
    (3.00000000000000e+00, -2.60051954901933e-01),
    (4.00000000000000e+00, -3.97149809863847e-01),
    (5.00000000000000e+00, -1.77596771314338e-01),
    (2.50000000000000e-01, 9.84435929295853e-01),
    (7.50000000000000e-01, 8.64242275166649e-01),
    (1.00000000000000e+01, -2.45935764451348e-01),
    (2.00000000000000e+01, 1.67024664340583e-01),
];
const J5_TABLE: [(f64, f64); 14] = [
    (1.00000000000000e-01, 2.60308179096444e-09),
    (2.00000000000000e-01, 8.31945436094694e-08),
    (5.00000000000000e-01, 8.05362724135748e-06),
    (1.00000000000000e+00, 2.49757730211235e-04),
    (1.50000000000000e+00, 1.79942176736061e-03),
    (2.00000000000000e+00, 7.03962975587169e-03),
    (2.50000000000000e+00, 1.95016251345032e-02),
    (3.00000000000000e+00, 4.30284348770476e-02),
    (4.00000000000000e+00, 1.32086656047098e-01),
    (5.00000000000000e+00, 2.61140546120170e-01),
    (2.50000000000000e-01, 2.53651615874724e-07),
    (7.50000000000000e-01, 6.03641665105765e-05),
    (1.00000000000000e+01, -2.34061528186794e-01),
    (2.00000000000000e+01, 1.51169767982395e-01),
];
const J20_TABLE: [(f64, f64); 14] = [
    (1.00000000000000e-01, 3.91943772085861e-45),
    (2.00000000000000e-01, 4.10836077398096e-39),
    (5.00000000000000e-01, 3.72720196170470e-31),
    (1.00000000000000e+00, 3.87350300852465e-25),
    (1.50000000000000e+00, 1.26899721893326e-21),
    (2.00000000000000e+00, 3.91897280509075e-19),
    (2.50000000000000e+00, 3.30907938365879e-17),
    (3.00000000000000e+00, 1.22759467379930e-15),
    (4.00000000000000e+00, 3.55951162859386e-13),
    (5.00000000000000e+00, 2.77033005212894e-11),
    (2.50000000000000e-01, 3.56248055105870e-37),
    (7.50000000000000e-01, 1.23478706936335e-27),
    (1.00000000000000e+01, 1.15133692478134e-05),
    (2.00000000000000e+01, 1.64747773775327e-01),
];
const Y0_TABLE: [(f64, f64); 14] = [
    (1.00000000000000e-01, -1.53423865135037e+00),
    (2.00000000000000e-01, -1.08110532237211e+00),
    (5.00000000000000e-01, -4.44518733506707e-01),
    (1.00000000000000e+00, 8.82569642156770e-02),
    (1.50000000000000e+00, 3.82448923797759e-01),
    (2.00000000000000e+00, 5.10375672649745e-01),
    (2.50000000000000e+00, 4.98070359615232e-01),
    (3.00000000000000e+00, 3.76850010012791e-01),
    (4.00000000000000e+00, -1.69407393250648e-02),
    (5.00000000000000e+00, -3.08517625249033e-01),
    (2.50000000000000e-01, -9.31573024930059e-01),
    (7.50000000000000e-01, -1.37172769385772e-01),
    (1.00000000000000e+01, 5.56711672835996e-02),
    (2.00000000000000e+01, 6.26405968093837e-02),
];
const Y5_TABLE: [(f64, f64); 14] = [
    (1.00000000000000e-01, -2.44614845023039e+07),
    (2.00000000000000e-01, -7.65856774575641e+05),
    (5.00000000000000e-01, -7.94630147880748e+03),
    (1.00000000000000e+00, -2.60405866625812e+02),
    (1.50000000000000e+00, -3.71903083954981e+01),
    (2.00000000000000e+00, -9.93598912848198e+00),
    (2.50000000000000e+00, -3.83017600074075e+00),
    (3.00000000000000e+00, -1.90594595382867e+00),
    (4.00000000000000e+00, -7.95851421114201e-01),
    (5.00000000000000e+00, -4.53694822491101e-01),
    (2.50000000000000e-01, -2.51309481518524e+05),
    (7.50000000000000e-01, -1.06724689522898e+03),
    (1.00000000000000e+01, 1.35403047689363e-01),
    (2.00000000000000e+01, -1.00035767889532e-01),
];

const K0_TABLE: [(f64, f64); 13] = [
    (2.00000000000000e-01, 1.75270385552815e+00),
    (5.00000000000000e-01, 9.24419071227666e-01),
    (1.00000000000000e+00, 4.21024438240708e-01),
    (1.50000000000000e+00, 2.13805562647526e-01),
    (2.00000000000000e+00, 1.13893872749533e-01),
    (2.50000000000000e+00, 6.23475532003662e-02),
    (3.00000000000000e+00, 3.47395043862792e-02),
    (4.00000000000000e+00, 1.11596760858530e-02),
    (5.00000000000000e+00, 3.69109833404259e-03),
    (2.50000000000000e-01, 1.54150675124830e+00),
    (7.50000000000000e-01, 6.10582422116464e-01),
    (1.00000000000000e+01, 1.77800623161677e-05),
    (2.00000000000000e+01, 5.74123781533652e-10),
];
const K5_TABLE: [(f64, f64); 13] = [
    (2.00000000000000e-01, 1.19700499168726e+06),
    (5.00000000000000e-01, 1.20979794760964e+04),
    (1.00000000000000e+00, 3.60960589601241e+02),
    (1.50000000000000e+00, 4.40677811593011e+01),
    (2.00000000000000e+00, 9.43104910059647e+00),
    (2.50000000000000e+00, 2.71688429078654e+00),
    (3.00000000000000e+00, 9.37773602386808e-01),
    (4.00000000000000e+00, 1.54342548725997e-01),
    (5.00000000000000e+00, 3.27062737120319e-02),
    (2.50000000000000e-01, 3.91683989623349e+05),
    (7.50000000000000e-01, 1.56258703396911e+03),
    (1.00000000000000e+01, 5.75418499853123e-05),
    (2.00000000000000e+01, 1.05386601399742e-09),
];

const I0_TABLE: [(f64, f64); 13] = [
    (2.00000000000000e-01, 1.01002502779515e+00),
    (5.00000000000000e-01, 1.06348337074132e+00),
    (1.00000000000000e+00, 1.26606587775201e+00),
    (1.50000000000000e+00, 1.64672318977289e+00),
    (2.00000000000000e+00, 2.27958530233607e+00),
    (2.50000000000000e+00, 3.28983914405013e+00),
    (3.00000000000000e+00, 4.88079258586503e+00),
    (4.00000000000000e+00, 1.13019219521363e+01),
    (5.00000000000000e+00, 2.72398718236045e+01),
    (2.50000000000000e-01, 1.01568614122361e+00),
    (7.50000000000000e-01, 1.14564677804400e+00),
    (1.00000000000000e+01, 2.81571662846625e+03),
    (2.00000000000000e+01, 4.35582825595535e+07),
];
const I5_TABLE: [(f64, f64); 13] = [
    (2.00000000000000e-01, 8.34723214699189e-08),
    (5.00000000000000e-01, 8.22317131310926e-06),
    (1.00000000000000e+00, 2.71463155956972e-04),
    (1.50000000000000e+00, 2.17055956909756e-03),
    (2.00000000000000e+00, 9.82567932313170e-03),
    (2.50000000000000e+00, 3.28434751720232e-02),
    (3.00000000000000e+00, 9.12064776615134e-02),
    (4.00000000000000e+00, 5.04724363113166e-01),
    (5.00000000000000e+00, 2.15797454732255e+00),
    (2.50000000000000e-01, 2.54976164498828e-07),
    (7.50000000000000e-01, 6.32611227398117e-05),
    (1.00000000000000e+01, 7.77188286403260e+02),
    (2.00000000000000e+01, 2.30183922134137e+07),
];

// epsilon in the assertion has been set to the smallest magnitude for which the tests pass.

#[test]
fn jn_test() {
    for (x, ans) in J0_TABLE {
        assert_abs_diff_eq!(Jn(0, x), ans, epsilon = 1e-11);
    }

    for (x, ans) in J5_TABLE {
        assert_abs_diff_eq!(Jn(5, x), ans, epsilon = 1e-11);
    }

    for (x, ans) in J20_TABLE {
        assert_abs_diff_eq!(Jn(20, x), ans, epsilon = 1e-11);
    }
}

#[test]
fn yn_test() {
    for (x, ans) in Y0_TABLE {
        assert_relative_eq!(Yn(0, x), ans, epsilon = 1e-11);
    }

    for (x, ans) in Y5_TABLE {
        assert_relative_eq!(Yn(5, x), ans, epsilon = 1e-7);
    }
}

#[test]
fn kn_test() {
    for (x, ans) in K0_TABLE {
        assert_abs_diff_eq!(Kn(0, x), ans, epsilon = 1e-11);
    }

    for (x, ans) in K5_TABLE {
        assert_abs_diff_eq!(Kn(5, x), ans, epsilon = 1e-9);
    }
}

#[test]
fn in_test() {
    for (x, ans) in I0_TABLE {
        assert_abs_diff_eq!(In(0, x), ans, epsilon = 1e-7);
    }

    for (x, ans) in I5_TABLE {
        assert_abs_diff_eq!(In(5, x), ans, epsilon = 1e-7);
    }
}