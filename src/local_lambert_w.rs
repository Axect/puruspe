pub use lambert_w::{lambert_w0, lambert_wm1, sp_lambert_w0, sp_lambert_wm1};

#[cfg(test)]
mod test {
    use super::*;
    use approx::assert_abs_diff_eq;
    
    const LAMBERT_W0_TABLE: [(f64, f64); 21] = [
        (-3.6787944117144233e-01, -1.0000000000000000e+00),
        (1.0000000000000001e-01, 9.1276527160862264e-02),
        (2.0000000000000001e-01, 1.6891597349910958e-01),
        (5.0000000000000000e-01, 3.5173371124919584e-01),
        (1.0000000000000000e+00, 5.6714329040978384e-01),
        (1.5000000000000000e+00, 7.2586135776622629e-01),
        (2.0000000000000000e+00, 8.5260550201372542e-01),
        (2.5000000000000000e+00, 9.5858635672870285e-01),
        (3.0000000000000000e+00, 1.0499088949640398e+00),
        (4.0000000000000000e+00, 1.2021678731970429e+00),
        (5.0000000000000000e+00, 1.3267246652422002e+00),
        (1.0000000000000000e+01, 1.7455280027406994e+00),
        (2.0000000000000000e+01, 2.2050032780240598e+00),
        (5.0000000000000000e+01, 2.8608901779822107e+00),
        (2.5000000000000000e-01, 2.0388835470224018e-01),
        (7.5000000000000000e-01, 4.6915021069498819e-01),
        (1.0000000000000001e-05, 9.9999000014999740e-06),
        (1.0000000000000000e-10, 9.9999999989999997e-11),
        (1.0000000000000000e+05, 9.2845714286221082e+00),
        (1.0000000000000000e+10, 2.0028685413304952e+01),
        (1.0000000000000000e+308, 7.0264136203410681e+02),
    ];

    #[test]
    fn test_lambert_w0() {
        assert!(lambert_w0(-1.0).is_nan());
        for (x, y) in LAMBERT_W0_TABLE {
            let small_epsilon = if x <= 1e8 {1e-14} else if x <= 1e20 {1e-13} else {1e-12};
            let large_epsilon = small_epsilon*1e8;
            assert_abs_diff_eq!(lambert_w0(x), y, epsilon = small_epsilon);
            assert_abs_diff_eq!(sp_lambert_w0(x), y, epsilon = large_epsilon);
        }
    }
}